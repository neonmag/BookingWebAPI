// <auto-generated />
using System;
using BookingWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240928121217_RefactorOrders")]
    partial class RefactorOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookingWebAPI.Entity.Hall.ConcertHall", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("amountOfPlaces")
                        .HasColumnType("int");

                    b.Property<int>("basePricing")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isProjectorAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isSoundAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isWifiAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("dbConcertHall");
                });

            modelBuilder.Entity("BookingWebAPI.Entity.Orders.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("finalPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("hallId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("isProjectorAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isSoundAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isWifiAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("hallId");

                    b.ToTable("dbOrders");
                });

            modelBuilder.Entity("BookingWebAPI.Entity.Orders.Order", b =>
                {
                    b.HasOne("BookingWebAPI.Entity.Hall.ConcertHall", null)
                        .WithMany()
                        .HasForeignKey("hallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
